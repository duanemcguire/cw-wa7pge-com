### .env-dist should contain the default settings for all new apps, and edited rarely.
### .env_${DOCKER_CONTEXT}_${INSTANCE} should contain your specific instance config.
### Use `make config` to create/update the instance config from .env-dist

## Select the compose profiles to start tagged services.
## Use 'default' to bring up the production services.
## Use 'test' to bring up the test services.
DOCKER_COMPOSE_PROFILES=default

## All environment variable names should use a common prefix:
## eg. 'CW_' (rename this prefix to be specific for your app.)
## This prefix is to be stripped, when mapped in docker-compose.yaml:
## eg. CW_API_UPLOAD_FOLDER
##       becomes just API_UPLOAD_FOLDER inside your containers.

# The domain name for this instance of the app:
CW_TRAEFIK_HOST=flask-template.example.com

# Things you are only allowed to do in DEV mode:
#  * Only in dev mode are you allowed to run `make dropdb`.
CW_DEV_MODE=false

## Create a unique name for this instance of the app:
##`make config` will set this to `default` if you do not specify it.
CW_INSTANCE=

# Filter access by IP address source range (CIDR):
# See: https://doc.traefik.io/traefik/middlewares/http/ipwhitelist/
## Disallow all access:
#CW_IP_SOURCERANGE="0.0.0.0/32"
## Allow all access:
#CW_IP_SOURCERANGE="0.0.0.0/0"
CW_IP_SOURCERANGE="0.0.0.0/0"

# HTTP Basic Authentication
# Use `make config` to generate and configure this setting interactively.
# Set multiple htpasswd encoded username/passwords comma separated; blank to disable
# See: https://doc.traefik.io/traefik/middlewares/http/basicauth/
CW_HTTP_AUTH=

# OAUTH2
# Set to `true` to use OpenID/OAuth2 authentication via the
# traefik-forward-auth service in d.rymcg.tech.
# Using OpenID/OAuth2 will require login to access your app,
# but it will not affect what a successfully logged-in person can do in your
# app. If your app has built-in authentication and can check the user
# header that traefik-forward-auth sends, then your app can limit what the
# logged-in person can do in the app. But if your app can't check the user
# header, or if your app doesn't have built-in authentication at all, then
# any person with an account on your Gitea server can log into your app and
# have full access.
CW_OAUTH2=
# In addition to Oauth2 authentication, you can configure basic authorization
# by entering which authorization group can log into your app. You create
# groups of email addresses in the `traefik` folder by running `make groups`. 
CW_OAUTH2_AUTHORIZED_GROUP=

# Mutual TLS (mTLS):
# Set true or false. If true, all clients must present a certificate signed by Step-CA:
CW_MTLS_AUTH=false
# Enter a comma separated list of client domains allowed to connect via mTLS.
# Wildcards are allowed and encouraged on a per-app basis:
CW_MTLS_AUTHORIZED_CERTS=*.clients.flask-template.example.com

## You may customize the UID and GID that the container runs as, this
## is passed into the Dockerfile as a build ARG.
CW_UID=54321
CW_GID=54321

# PostgreSQL
CW_POSTGRES_DATABASE=flask-template
CW_POSTGRES_USER=flask-template
CW_POSTGRES_PASSWORD=

# Python log level:
# use debug, info, warning, error, or critical
CW_API_LOG_LEVEL=debug

CW_API_UPLOAD_FOLDER=/uploads

# Add CORS domains to allowed to interact with the API
# "*" means to allow all domains, which is usually INSECURE!
CW_API_CORS_WHITELIST=*
