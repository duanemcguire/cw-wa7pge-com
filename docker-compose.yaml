services:
  ## The Flask API service:
  ## If you change this name, change it in docker-compose.instance.yaml too:
  api:
    profiles: ['default']
    depends_on:
      database:
        condition: service_healthy
    ## Build the docker image from the local Dockerfile source:
    build:
      context: api
      args:
        UID: ${CW_UID}
        GID: ${CW_GID}
    ## user is optional, it overrides the USER of the Dockerfile
    user: ${CW_UID}:${CW_GID}
    environment:
      - PGHOST=database
      - PGPORT=5432
      - PGDATABASE=${CW_POSTGRES_DATABASE}
      - PGUSER=${CW_POSTGRES_USER}
      - PGPASSWORD=${CW_POSTGRES_PASSWORD}
      - DOCKER_PROJECT=
      - API_UPLOAD_FOLDER=${CW_API_UPLOAD_FOLDER}
      - API_LOG_LEVEL=${CW_API_LOG_LEVEL}
    volumes:
      - uploads:${CW_API_UPLOAD_FOLDER}
    networks:
      - default

  ## The PostgreSQL database service:
  ## If you change this name, change it in docker-compose.instance.yaml too:
  database:
    profiles: ['default']
    image: postgres:16
    environment:
      - POSTGRES_PASSWORD=${CW_POSTGRES_PASSWORD}
      - POSTGRES_USER=${CW_POSTGRES_USER}
      - POSTGRES_DB=${CW_POSTGRES_DATABASE}
    volumes:
      - database:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
    networks:
      - default

  api-tests:
    profiles: ['test']
    build:
      context: api
      dockerfile: Dockerfile.test
      args:
        IMAGE: flask-template-api
        UID: ${CW_UID}
        GID: ${CW_GID}
    ## user is optional, it overrides the USER of the Dockerfile
    user: ${CW_UID}:${CW_GID}
    environment:
      - PGHOST=database-test
      - PGPORT=5432
      - PGDATABASE=${CW_POSTGRES_DATABASE}
      - PGUSER=${CW_POSTGRES_USER}
      - PGPASSWORD=${CW_POSTGRES_PASSWORD}
      - DOCKER_PROJECT=
      - API_LOG_LEVEL=${CW_API_LOG_LEVEL}
    depends_on:
      - database-test
    networks:
      - test

  ## The PostgreSQL TEST database service:
  ## There is no persistent volume for the TEST database!
  database-test:
    profiles: ['test']
    image: postgres:16
    environment:
      - POSTGRES_PASSWORD=${CW_POSTGRES_PASSWORD}
      - POSTGRES_USER=${CW_POSTGRES_USER}
      - POSTGRES_DB=${CW_POSTGRES_DATABASE}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
    networks:
      - test

networks:
  test:

volumes:
  database:
  uploads:
